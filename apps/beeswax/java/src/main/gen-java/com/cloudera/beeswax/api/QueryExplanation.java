/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.cloudera.beeswax.api;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class QueryExplanation implements TBase<QueryExplanation, QueryExplanation._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("QueryExplanation");

  private static final TField TEXTUAL_FIELD_DESC = new TField("textual", TType.STRING, (short)1);

  public String textual;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    TEXTUAL((short)1, "textual");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEXTUAL
          return TEXTUAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEXTUAL, new FieldMetaData("textual", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(QueryExplanation.class, metaDataMap);
  }

  public QueryExplanation() {
  }

  public QueryExplanation(
    String textual)
  {
    this();
    this.textual = textual;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryExplanation(QueryExplanation other) {
    if (other.isSetTextual()) {
      this.textual = other.textual;
    }
  }

  public QueryExplanation deepCopy() {
    return new QueryExplanation(this);
  }

  @Override
  public void clear() {
    this.textual = null;
  }

  public String getTextual() {
    return this.textual;
  }

  public QueryExplanation setTextual(String textual) {
    this.textual = textual;
    return this;
  }

  public void unsetTextual() {
    this.textual = null;
  }

  /** Returns true if field textual is set (has been asigned a value) and false otherwise */
  public boolean isSetTextual() {
    return this.textual != null;
  }

  public void setTextualIsSet(boolean value) {
    if (!value) {
      this.textual = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TEXTUAL:
      if (value == null) {
        unsetTextual();
      } else {
        setTextual((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TEXTUAL:
      return getTextual();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TEXTUAL:
      return isSetTextual();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryExplanation)
      return this.equals((QueryExplanation)that);
    return false;
  }

  public boolean equals(QueryExplanation that) {
    if (that == null)
      return false;

    boolean this_present_textual = true && this.isSetTextual();
    boolean that_present_textual = true && that.isSetTextual();
    if (this_present_textual || that_present_textual) {
      if (!(this_present_textual && that_present_textual))
        return false;
      if (!this.textual.equals(that.textual))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_textual = true && (isSetTextual());
    builder.append(present_textual);
    if (present_textual)
      builder.append(textual);

    return builder.toHashCode();
  }

  public int compareTo(QueryExplanation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryExplanation typedOther = (QueryExplanation)other;

    lastComparison = Boolean.valueOf(isSetTextual()).compareTo(typedOther.isSetTextual());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTextual()) {
      lastComparison = TBaseHelper.compareTo(this.textual, typedOther.textual);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TEXTUAL
          if (field.type == TType.STRING) {
            this.textual = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.textual != null) {
      oprot.writeFieldBegin(TEXTUAL_FIELD_DESC);
      oprot.writeString(this.textual);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryExplanation(");
    boolean first = true;

    sb.append("textual:");
    if (this.textual == null) {
      sb.append("null");
    } else {
      sb.append(this.textual);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

