/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

/**
 * Encapsulates a block data transfer with its CRC
 */
public class BlockData implements TBase<BlockData, BlockData._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BlockData");

  private static final TField CRC_FIELD_DESC = new TField("crc", TType.I32, (short)1);
  private static final TField LENGTH_FIELD_DESC = new TField("length", TType.I32, (short)2);
  private static final TField DATA_FIELD_DESC = new TField("data", TType.STRING, (short)3);

  /**
   * CRC32 of the data being transfered
   */
  public int crc;
  /**
   * Length of the data being transfered
   */
  public int length;
  /**
   * The data itsef
   */
  public ByteBuffer data;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    /**
     * CRC32 of the data being transfered
     */
    CRC((short)1, "crc"),
    /**
     * Length of the data being transfered
     */
    LENGTH((short)2, "length"),
    /**
     * The data itsef
     */
    DATA((short)3, "data");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CRC
          return CRC;
        case 2: // LENGTH
          return LENGTH;
        case 3: // DATA
          return DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CRC_ISSET_ID = 0;
  private static final int __LENGTH_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CRC, new FieldMetaData("crc", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.LENGTH, new FieldMetaData("length", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.DATA, new FieldMetaData("data", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(BlockData.class, metaDataMap);
  }

  public BlockData() {
  }

  public BlockData(
    int crc,
    int length,
    ByteBuffer data)
  {
    this();
    this.crc = crc;
    setCrcIsSet(true);
    this.length = length;
    setLengthIsSet(true);
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlockData(BlockData other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.crc = other.crc;
    this.length = other.length;
    if (other.isSetData()) {
      this.data = TBaseHelper.copyBinary(other.data);
;
    }
  }

  public BlockData deepCopy() {
    return new BlockData(this);
  }

  @Override
  public void clear() {
    setCrcIsSet(false);
    this.crc = 0;
    setLengthIsSet(false);
    this.length = 0;
    this.data = null;
  }

  /**
   * CRC32 of the data being transfered
   */
  public int getCrc() {
    return this.crc;
  }

  /**
   * CRC32 of the data being transfered
   */
  public BlockData setCrc(int crc) {
    this.crc = crc;
    setCrcIsSet(true);
    return this;
  }

  public void unsetCrc() {
    __isset_bit_vector.clear(__CRC_ISSET_ID);
  }

  /** Returns true if field crc is set (has been asigned a value) and false otherwise */
  public boolean isSetCrc() {
    return __isset_bit_vector.get(__CRC_ISSET_ID);
  }

  public void setCrcIsSet(boolean value) {
    __isset_bit_vector.set(__CRC_ISSET_ID, value);
  }

  /**
   * Length of the data being transfered
   */
  public int getLength() {
    return this.length;
  }

  /**
   * Length of the data being transfered
   */
  public BlockData setLength(int length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bit_vector.clear(__LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been asigned a value) and false otherwise */
  public boolean isSetLength() {
    return __isset_bit_vector.get(__LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bit_vector.set(__LENGTH_ISSET_ID, value);
  }

  /**
   * The data itsef
   */
  public byte[] getData() {
    setData(TBaseHelper.rightSize(data));
    return data.array();
  }

  public ByteBuffer BufferForData() {
    return data;
  }

  /**
   * The data itsef
   */
  public BlockData setData(byte[] data) {
    setData(ByteBuffer.wrap(data));
    return this;
  }

  public BlockData setData(ByteBuffer data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been asigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CRC:
      if (value == null) {
        unsetCrc();
      } else {
        setCrc((Integer)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Integer)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CRC:
      return new Integer(getCrc());

    case LENGTH:
      return new Integer(getLength());

    case DATA:
      return getData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CRC:
      return isSetCrc();
    case LENGTH:
      return isSetLength();
    case DATA:
      return isSetData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlockData)
      return this.equals((BlockData)that);
    return false;
  }

  public boolean equals(BlockData that) {
    if (that == null)
      return false;

    boolean this_present_crc = true;
    boolean that_present_crc = true;
    if (this_present_crc || that_present_crc) {
      if (!(this_present_crc && that_present_crc))
        return false;
      if (this.crc != that.crc)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BlockData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BlockData typedOther = (BlockData)other;

    lastComparison = Boolean.valueOf(isSetCrc()).compareTo(typedOther.isSetCrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrc()) {
      lastComparison = TBaseHelper.compareTo(this.crc, typedOther.crc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = TBaseHelper.compareTo(this.length, typedOther.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = TBaseHelper.compareTo(this.data, typedOther.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CRC
          if (field.type == TType.I32) {
            this.crc = iprot.readI32();
            setCrcIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LENGTH
          if (field.type == TType.I32) {
            this.length = iprot.readI32();
            setLengthIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DATA
          if (field.type == TType.STRING) {
            this.data = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CRC_FIELD_DESC);
    oprot.writeI32(this.crc);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LENGTH_FIELD_DESC);
    oprot.writeI32(this.length);
    oprot.writeFieldEnd();
    if (this.data != null) {
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      oprot.writeBinary(this.data);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlockData(");
    boolean first = true;

    sb.append("crc:");
    sb.append(this.crc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      TBaseHelper.toString(this.data, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

